返回主页
Dufresne
改变从现在开始！
博客园首页新随笔联系管理订阅订阅
随笔- 127  文章- 0  评论- 101 
Linux中fork（）函数详解
linux中fork（）函数详解（原创！！实例讲解） （转载）

 
 一、fork入门知识

     一个进程，包括代码、数据和分配给进程的资源。fork（）函数通过系统调用创建一个与原来进程几乎完全相同的进程，

也就是两个进程可以做完全相同的事，但如果初始参数或者传入的变量不同，两个进程也可以做不同的事。


    一个进程调用fork（）函数后，系统先给新的进程分配资源，例如存储数据和代码的空间。然后把原来的进程的所有值都

复制到新的新进程中，只有少数值与原来的进程的值不同。相当于克隆了一个自己。

     我们来看一个例子：

 

[cpp] view plaincopy

/* 
 *  fork_test.c 
 *  version 1 
 *  Created on: 2010-5-29 
 *      Author: wangth 
 */  
#include <unistd.h>  
#include <stdio.h>   
int main ()   
{   
    pid_t fpid; //fpid表示fork函数返回的值  
    int count=0;  
    fpid=fork();   
    if (fpid < 0)   
        printf("error in fork!");   
    else if (fpid == 0) {  
        printf("i am the child process, my process id is %d/n",getpid());   
        printf("我是爹的儿子/n");//对某些人来说中文看着更直白。  
        count++;  
    }  
    else {  
        printf("i am the parent process, my process id is %d/n",getpid());   
        printf("我是孩子他爹/n");  
        count++;  
    }  
    printf("统计结果是: %d/n",count);  
    return 0;  
}  
 

运行结果是：
    i am the child process, my process id is 5574
    我是爹的儿子
    统计结果是: 1
    i am the parent process, my process id is 5573
    我是孩子他爹
    统计结果是: 1


    在语句fpid=fork()之前，只有一个进程在执行这段代码，但在这条语句之后，就变成两个进程在执行了，这两个进程的几乎完全相同，

将要执行的下一条语句都是if(fpid<0)……
    为什么两个进程的fpid不同呢，这与fork函数的特性有关。

fork调用的一个奇妙之处就是它仅仅被调用一次，却能够返回两次，它可能有三种不同的返回值：
    1）在父进程中，fork返回新创建子进程的进程ID；
    2）在子进程中，fork返回0；
    3）如果出现错误，fork返回一个负值；

    在fork函数执行完毕后，如果创建新进程成功，则出现两个进程，一个是子进程，一个是父进程。在子进程中，fork函数返回0，在父进程中，

fork返回新创建子进程的进程ID。我们可以通过fork返回的值来判断当前进程是子进程还是父进程。

    引用一位网友的话来解释fpid的值为什么在父子进程中不同。“其实就相当于链表，进程形成了链表，父进程的fpid(p 意味point)指向子进程的进程id,

因为子进程没有子进程，所以其fpid为0.


fork出错可能有两种原因：
    1）当前的进程数已经达到了系统规定的上限，这时errno的值被设置为EAGAIN。
    2）系统内存不足，这时errno的值被设置为ENOMEM。


    创建新进程成功后，系统中出现两个基本完全相同的进程，这两个进程执行没有固定的先后顺序，哪个进程先执行要看系统的进程调度策略。
    每个进程都有一个独特（互不相同）的进程标识符（process ID），可以通过getpid（）函数获得，还有一个记录父进程pid的变量，可以通过getppid（）函数获得变量的值。
fork执行完毕后，出现两个进程，



    有人说两个进程的内容完全一样啊，怎么打印的结果不一样啊，那是因为判断条件的原因，上面列举的只是进程的代码和指令，还有变量啊。


    执行完fork后，进程1的变量为count=0，fpid！=0（父进程）。进程2的变量为count=0，fpid=0（子进程），这两个进程的变量都是独立的，

存在不同的地址中，不是共用的，这点要注意。可以说，我们就是通过fpid来识别和操作父子进程的。


    还有人可能疑惑为什么不是从#include处开始复制代码的，这是因为fork是把进程当前的情况拷贝一份，执行fork时，进程已经执行完了int count=0;

fork只拷贝下一个要执行的代码到新的进程。

 

二、fork进阶知识

    先看一份代码：

 

[cpp] view plaincopy

/* 
 *  fork_test.c 
 *  version 2 
 *  Created on: 2010-5-29 
 *      Author: wangth 
 */  
#include <unistd.h>  
#include <stdio.h>  
int main(void)  
{  
   int i=0;  
   printf("i son/pa ppid pid  fpid/n");  
   //ppid指当前进程的父进程pid  
   //pid指当前进程的pid,  
   //fpid指fork返回给当前进程的值  
   for(i=0;i<2;i++){  
       pid_t fpid=fork();  
       if(fpid==0)  
           printf("%d child  %4d %4d %4d/n",i,getppid(),getpid(),fpid);  
       else  
           printf("%d parent %4d %4d %4d/n",i,getppid(),getpid(),fpid);  
   }  
   return 0;  
}  
 

    运行结果是：
    i son/pa ppid pid  fpid
    0 parent 2043 3224 3225
    0 child  3224 3225    0
    1 parent 2043 3224 3226
    1 parent 3224 3225 3227
    1 child     1 3227    0
    1 child     1 3226    0 


    这份代码比较有意思，我们来认真分析一下：
    第一步：在父进程中，指令执行到for循环中，i=0，接着执行fork，fork执行完后，系统中出现两个进程，分别是p3224和p3225

（后面我都用pxxxx表示进程id为xxxx的进程）。可以看到父进程p3224的父进程是p2043，子进程p3225的父进程正好是p3224。我们用一个链表来表示这个关系：
    p2043->p3224->p3225 
    第一次fork后，p3224（父进程）的变量为i=0，fpid=3225（fork函数在父进程中返向子进程id），代码内容为：

 

[c-sharp] view plaincopy

for(i=0;i<2;i++){  
    pid_t fpid=fork();//执行完毕，i=0，fpid=3225  
    if(fpid==0)  
       printf("%d child  %4d %4d %4d/n",i,getppid(),getpid(),fpid);  
    else  
       printf("%d parent %4d %4d %4d/n",i,getppid(),getpid(),fpid);  
}  
return 0;  
 

    p3225（子进程）的变量为i=0，fpid=0（fork函数在子进程中返回0），代码内容为：

[c-sharp] view plaincopy

for(i=0;i<2;i++){  
    pid_t fpid=fork();//执行完毕，i=0，fpid=0  
    if(fpid==0)  
       printf("%d child  %4d %4d %4d/n",i,getppid(),getpid(),fpid);  
    else  
       printf("%d parent %4d %4d %4d/n",i,getppid(),getpid(),fpid);  
}  
return 0;  
 

    所以打印出结果：
    0 parent 2043 3224 3225
    0 child  3224 3225    0
    第二步：假设父进程p3224先执行，当进入下一个循环时，i=1，接着执行fork，系统中又新增一个进程p3226，对于此时的父进程，

p2043->p3224（当前进程）->p3226（被创建的子进程）。
    对于子进程p3225，执行完第一次循环后，i=1，接着执行fork，系统中新增一个进程p3227，对于此进程，p3224->p3225（当前进程）->p3227（被创建的子进程）。

从输出可以看到p3225原来是p3224的子进程，现在变成p3227的父进程。父子是相对的，这个大家应该容易理解。只要当前进程执行了fork，该进程就变成了父进程了，就打印出了parent。
  所以打印出结果是：
    1 parent 2043 3224 3226
    1 parent 3224 3225 3227 
    第三步：第二步创建了两个进程p3226，p3227，这两个进程执行完printf函数后就结束了，因为这两个进程无法进入第三次循环，无法fork，该执行return 0;了，其他进程也是如此。
    以下是p3226，p3227打印出的结果：
    1 child     1 3227    0
    1 child     1 3226    0 
    细心的读者可能注意到p3226，p3227的父进程难道不该是p3224和p3225吗，怎么会是1呢？这里得讲到进程的创建和死亡的过程，

在p3224和p3225执行完第二个循环后，main函数就该退出了，也即进程该死亡了，因为它已经做完所有事情了。p3224和p3225死亡后，

p3226，p3227就没有父进程了，这在操作系统是不被允许的，所以p3226，p3227的父进程就被置为p1了，p1是永远不会死亡的，至于为什么，

这里先不介绍，留到“三、fork高阶知识”讲。


    总结一下，这个程序执行的流程如下：



     这个程序最终产生了3个子进程，执行过6次printf（）函数。
    我们再来看一份代码：

 

[cpp] view plaincopy

/* 
 *  fork_test.c 
 *  version 3 
 *  Created on: 2010-5-29 
 *      Author: wangth 
 */  
#include <unistd.h>  
#include <stdio.h>  
int main(void)  
{  
   int i=0;  
   for(i=0;i<3;i++){  
       pid_t fpid=fork();  
       if(fpid==0)  
           printf("son/n");  
       else  
           printf("father/n");  
   }  
   return 0;  
  
}  
 

     它的执行结果是：
    father
    son
    father
    father
    father
    father
    son
    son
    father
    son
    son
    son
    father
    son 
    这里就不做详细解释了，只做一个大概的分析。
    for        i=0         1           2
              father     father     father
                                        son
                            son       father
                                        son
               son       father     father
                                        son
                            son       father
                                        son
    其中每一行分别代表一个进程的运行打印结果。
    总结一下规律，对于这种N次循环的情况，执行printf函数的次数为2*（1+2+4+……+2N-1）次，创建的子进程数为1+2+4+……+2N-1个。

(感谢gao_jiawei网友指出的错误，原本我的结论是“执行printf函数的次数为2*（1+2+4+……+2N）次，创建的子进程数为1+2+4+……+2N ”，这是错的)
    网上有人说N次循环产生2*（1+2+4+……+2N）个进程，这个说法是不对的，希望大家需要注意。

    数学推理见http://202.117.3.13/wordpress/?p=81（该博文的最后）。
    同时，大家如果想测一下一个程序中到底创建了几个子进程，最好的方法就是调用printf函数打印该进程的pid，也即调用printf("%d/n",getpid());或者通过printf("+/n");

来判断产生了几个进程。有人想通过调用printf("+");来统计创建了几个进程，这是不妥当的。具体原因我来分析。
    老规矩，大家看一下下面的代码：

 

[cpp] view plaincopy

/* 
 *  fork_test.c 
 *  version 4 
 *  Created on: 2010-5-29 
 *      Author: wangth 
 */  
#include <unistd.h>  
#include <stdio.h>  
int main() {  
    pid_t fpid;//fpid表示fork函数返回的值  
    //printf("fork!");  
    printf("fork!/n");  
    fpid = fork();  
    if (fpid < 0)  
        printf("error in fork!");  
    else if (fpid == 0)  
        printf("I am the child process, my process id is %d/n", getpid());  
    else  
        printf("I am the parent process, my process id is %d/n", getpid());  
    return 0;  
}  
 

    执行结果如下：
    fork!
    I am the parent process, my process id is 3361
    I am the child process, my process id is 3362 
    如果把语句printf("fork!/n");注释掉，执行printf("fork!");
    则新的程序的执行结果是：
    fork!I am the parent process, my process id is 3298
    fork!I am the child process, my process id is 3299 


    程序的唯一的区别就在于一个/n回车符号，为什么结果会相差这么大呢？
    这就跟printf的缓冲机制有关了，printf某些内容时，操作系统仅仅是把该内容放到了stdout的缓冲队列里了,并没有实际的写到屏幕上。

但是,只要看到有/n 则会立即刷新stdout,因此就马上能够打印了。
    运行了printf("fork!")后,“fork!”仅仅被放到了缓冲里,程序运行到fork时缓冲里面的“fork!”  被子进程复制过去了。因此在子进程度stdout

缓冲里面就也有了fork! 。所以,你最终看到的会是fork!  被printf了2次！！！！
    而运行printf("fork! /n")后,“fork!”被立即打印到了屏幕上,之后fork到的子进程里的stdout缓冲里不会有fork! 内容。因此你看到的结果会是fork! 被printf了1次！！！！
    所以说printf("+");不能正确地反应进程的数量。
    大家看了这么多可能有点疲倦吧，不过我还得贴最后一份代码来进一步分析fork函数。

[cpp] view plaincopy

#include <stdio.h>  
#include <unistd.h>  
int main(int argc, char* argv[])  
{  
   fork();  
   fork() && fork() || fork();  
   fork();  
   return 0;  
}  
 

    问题是不算main这个进程自身，程序到底创建了多少个进程。
    为了解答这个问题，我们先做一下弊，先用程序验证一下，到此有多少个进程。

[c-sharp] view plaincopy

#include <stdio.h>  
int main(int argc, char* argv[])  
{  
   fork();  
   fork() && fork() || fork();  
   fork();  
   printf("+/n");  
}  
 

    答案是总共20个进程，除去main进程，还有19个进程。
    我们再来仔细分析一下，为什么是还有19个进程。
    第一个fork和最后一个fork肯定是会执行的。
    主要在中间3个fork上，可以画一个图进行描述。
    这里就需要注意&&和||运算符。
    A&&B，如果A=0，就没有必要继续执行&&B了；A非0，就需要继续执行&&B。
    A||B，如果A非0，就没有必要继续执行||B了，A=0，就需要继续执行||B。
    fork()对于父进程和子进程的返回值是不同的，按照上面的A&&B和A||B的分支进行画图，可以得出5个分支。

    

     加上前面的fork和最后的fork，总共4*5=20个进程，除去main主进程，就是19个进程了。

三、fork高阶知识

        这一块我主要就fork函数讲一下操作系统进程的创建、死亡和调度等。因为时间和精力限制，我先写到这里，下次找个时间我争取把剩下的内容补齐。

 

原文地址：http://blog.csdn.net/jason314/article/details/5640969

分类: Android,Linux,系统
标签: Linux fork process
好文要顶 关注我 收藏该文    
__Shadow
关注 - 13
粉丝 - 407
+加关注
28 0
« 上一篇：Android系统启动过程
» 下一篇：Win7与Ubuntu双系统时卸载Ubuntu的方法
posted @ 2012-08-31 10:00 __Shadow 阅读(172392) 评论(12) 编辑 收藏

评论
   #1楼 2014-03-30 18:39 | strawc  
啊，几个fork在一起我就晕了，一个套一个的。
支持(1)反对(0)
   #2楼 2014-04-14 14:59 | huangzh198  
我怎么都想不懂，既然fork复制的是父进程的，那按照汇编代码的角度来看，我第一次fork之后，执行的是后面的，
那打印出来的i 应该是
0 1
1 

0 1 
1 
这样的组合，而不是先打印两次0，之后再打印各自的1两次*2
支持(3)反对(0)
   #3楼 2014-10-06 15:57 | 小昌昌  
最后一道题目，按照你图里面的分析，一个fork_1就同时创建了两个子进程，process_gen2_1和process_gen2_2,这怎么解释啊？
支持(0)反对(0)
   #4楼 2014-10-20 20:08 | smileshitou  
你代码中的回车符错了吧? 应该为\n
支持(5)反对(0)
   #5楼 2015-01-18 12:23 | bloodyarthur  
lz,请问：当一个在一个父进程中产生一个子进程（与父进程是相同代码）时，当默认先执行父进程的情况下，那么当父进程执行完后，子进程是从哪里开始执行的？
支持(0)反对(0)
   #6楼 2015-07-26 10:25 | 努力变瘦  
fork()不会复制代码，父进程和子进程会共享代码。
支持(0)反对(0)
   #7楼 2015-11-19 21:40 | Epsilonull  
楼上正解
支持(0)反对(0)
   #8楼 2015-11-23 02:34 | 皑皑ii  
for i=0 1 2
father father father
son
son father
son
son father father
son
son father
son
其中每一行分别代表一个进程的运行打印结果。
打印下来的结果不是
father
son
father
father
father
father
son
son
father
son
son
son
father
son 
，你这里的解释怎么看不懂。。
支持(3)反对(0)
   #9楼 2016-09-13 20:33 | beautiful_lady  
回车符号好像写错了，而且运行代码每次打印结果可能不同，前面很清楚，最后一题没看懂
支持(0)反对(0)
   #10楼 2016-09-15 10:45 | izhangruotian  
楼主写的很详细，看了一晚上fork就看你的看懂了！感谢
支持(0)反对(0)
   #11楼 2017-02-13 17:36 | seancheer  
例子很不错，特别是最后一个。。仔细分析不难得出答案，感谢博主
支持(0)反对(0)
   #12楼 2017-06-15 11:22 | umbrellalalalala  
写的太好了，才开始学习操作系统，助教讲得很浅。博主的文章通俗易懂，利于入门和深入学习
支持(0)反对(0)
刷新评论刷新页面返回顶部
注册用户登录后才能发表评论，请 登录 或 注册，访问网站首页。
【推荐】超50万VC++源码: 大型组态工控、电力仿真CAD与GIS源码库！
【缅怀】传奇谢幕，回顾霍金76载传奇人生
【推荐】业界最快速.NET数据可视化图表组件
【推荐】腾讯云校园拼团福利，1核2G服务器10元/月！
【活动】2050 科技公益大会 - 年青人因科技而团聚
qcloud0314
最新IT新闻:
· 中国科创企业展望报告：创业者依旧乐观 融资和招人还是很难
· 十大手机厂商联手推“快应用”，与小程序死磕胜算有几分？
· 《我花208万祝你新婚快乐》策划人：这是真人真事，主角为化名
· 猎豹移动发布系列机器人产品 与多企业建立战略合作关系
· 刷屏被封背后，“新世相”们的隐藏逻辑
» 更多新闻...
阿里云0308
最新知识库文章:
· 写给自学者的入门指南
· 和程序员谈恋爱
· 学会学习
· 优秀技术人的管理陷阱
· 作为一个程序员，数学对你到底有多重要
» 更多知识库文章...
昵称：__Shadow
园龄：6年6个月
粉丝：407
关注：13
+加关注
<	2012年8月	>
日	一	二	三	四	五	六
29	30	31	1	2	3	4
5	6	7	8	9	10	11
12	13	14	15	16	17	18
19	20	21	22	23	24	25
26	27	28	29	30	31	1
2	3	4	5	6	7	8
搜索

 找找看

 谷歌搜索
常用链接
我的随笔
我的评论
我的参与
最新评论
我的标签
最新随笔
1. 开机SystemServer到ActivityManagerService启动过程分析
2. windows中如何在命令行启动启动程序
3. PLMN概念和应用设置
4. UICC 实现框架和数据读写
5. Android调试获取Log
6. 通过system调用Am命令执行动作
7. 通过Socket直接与RILD进行通信
8. Telephony数据连接.管理——DataConnection
9. Telephony状态维护—ServiceStateTracker
10. Android相关权限的概念
我的标签
Android(9)
设计模式(7)
Android Ril(4)
Android Framework RIL(3)
Adapter(2)
Telephony(2)
算法 排序(2)
SIM(2)
Singleton(1)
SMS PDU编码(1)
更多
随笔分类
Android(34)
Android FrameWork(27)
Android 控件(2)
C/C++(12)
Java学习(3)
Linux(19)
Linux内核学习笔记(11)
Log & Debug(2)
Reserved form others(1)
Socket(3)
Telephony & RIL(14)
代码大全学习笔记(4)
内存管理(1)
软件方法(4)
设计模式(22)
深思总结(5)
实用工具方法(2)
数据结构与算法(3)
通讯协议(7)
系统(4)
随笔档案
2016年8月 (1)
2013年5月 (6)
2013年4月 (4)
2013年3月 (1)
2013年2月 (7)
2013年1月 (5)
2012年12月 (1)
2012年11月 (12)
2012年10月 (6)
2012年9月 (16)
2012年8月 (5)
2012年7月 (1)
2012年6月 (7)
2012年5月 (13)
2012年4月 (6)
2012年3月 (3)
2012年2月 (7)
2012年1月 (9)
2011年12月 (8)
2011年11月 (9)
积分与排名
积分 -	276469
排名 -	693
最新评论
1. Re:Android学习 StateMachine与State模式
--Angkor--:--
2. Re:不同网络下紧急拨号的处理
关于楼主的如下疑问，使用GSM卡，拨打112时提示各种紧急号码作用……使用CMDA卡，拨打112时提示拨打的号码是空号？？G网下，是有一个寻呼台的，拨打112会接入，然后用户就能听到里面的提示音。但是......
--xxvxxws
3. Re:不同网络下紧急拨号的处理
@snowchiA和B通话中，是可以添加一路紧急通话的，但是添加后，A和B的通话是应该挂断还是应该保留，3GPP协议并没有规定。可能存在A和B通话无法保留的情况，所以紧急号码就无法呼出，但是拨打紧急号......
--xxvxxws
4. Re:adb常用命令和logcat使用
使用管道输出+grep过滤真是好方法！
--友人L
5. Re:Decorator模式——设计模式学习笔记
蒙逼...我太笨了
--小梁丶
阅读排行榜
1. Linux中fork（）函数详解(172392)
2. Android中JNI的使用方法(153593)
3. Android 系统属性SystemProperty分析(80579)
4. Android系统启动过程(68475)
5. adb常用命令和logcat使用(46501)
评论排行榜
1. Linux中fork（）函数详解(12)
2. Android系统启动过程(11)
3. Android中JNI的使用方法(11)
4. Android学习笔记——Activity的启动和创建(9)
5. 通过Socket直接与RILD进行通信(4)
推荐排行榜
1. Linux中fork（）函数详解(28)
2. Android系统启动过程(12)
3. Android中JNI的使用方法(9)
4. Android学习笔记——Activity的启动和创建(8)
5. Android 系统属性SystemProperty分析(7)
Copyright ©2018 __Shadow